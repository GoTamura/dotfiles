[[plugins]]
repo = 'Shougo/dein.vim'
#-----------------------------------------------------------

[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
colorscheme gruvbox
set background=dark
'''

#-----------------------------------------------------------

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_completion_start_length = 1
autocmd CompleteDone * silent! pclose!

if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
imap <expr><CR> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
'''
hook_post_source = '''
" Use smartcase.
call deoplete#custom#option({
\ 'smart_case': v:true,
\ 'deoplete-options-auto_complete': v:true,
\ 'auto_complete_delay': 0,
\ })

'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['context_filetype.vim', 'neosnippet-snippets']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.cache/dein/repos/github.com/honza/vim-snippets/snippets'
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'honza/vim-snippets'

#-----------------------------------------------------------

# vim-airline
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline_powerline_fonts = 1
'''

hook_source = '''
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail'
'''
[[plugins]]
repo =  'vim-airline/vim-airline-themes'
hook_source = '''
let g:airline_theme = 'gruvbox'
'''

#-----------------------------------------------------------

#vimfiler
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
let g:python3_host_prog = expand('/usr/bin/python')
nmap <F10> :Denite file_rec<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
if !has('nvim')
  call dein#add('roxma/nvim-yarp')
  call dein#add('roxma/vim-hug-neovim-rpc')
endif

nmap <F11> :Defx<CR>

" http://takkii.hatenablog.com/entry/2018/08/19/133847
autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
     " Define mappings
      nnoremap <silent><buffer><expr> <CR>
     \ defx#do_action('drop')
      nnoremap <silent><buffer><expr> c
     \ defx#do_action('copy')
      nnoremap <silent><buffer><expr> m
     \ defx#do_action('move')
      nnoremap <silent><buffer><expr> p
     \ defx#do_action('paste')
      nnoremap <silent><buffer><expr> l
     \ defx#do_action('open')
      nnoremap <silent><buffer><expr> E
     \ defx#do_action('open', 'vsplit')
      nnoremap <silent><buffer><expr> P
     \ defx#do_action('open', 'pedit')
      nnoremap <silent><buffer><expr> K
     \ defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N
     \ defx#do_action('new_file')
      nnoremap <silent><buffer><expr> d
     \ defx#do_action('remove')
      nnoremap <silent><buffer><expr> r
     \ defx#do_action('rename')
      nnoremap <silent><buffer><expr> x
     \ defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> yy
     \ defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> .
     \ defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> h
     \ defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~
     \ defx#do_action('cd')
      nnoremap <silent><buffer><expr> q
     \ defx#do_action('quit')
      nnoremap <silent><buffer><expr> <Space>
     \ defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> *
     \ defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr> j
     \ line('.') == line('$') ? 'gg' : 'j'
      nnoremap <silent><buffer><expr> k
     \ line('.') == 1 ? 'G' : 'k'
      nnoremap <silent><buffer><expr> <C-l>
     \ defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g>
     \ defx#do_action('print')
      nnoremap <silent><buffer><expr> cd
     \ defx#do_action('change_vim_cwd')
    endfunction

nnoremap <silent><Space>e :call <SID>toggle_defx()<Cr>
function! s:toggle_defx()
  Defx -split=vertical -winwidth=40 -direction=topleft -toggle
endfunction 
'''

#-----------------------------------------------------------

##markdown
#[[plugins]]
#repo = 'plasticboy/vim-markdown'
#on_ft = 'md'
#
#[[plugins]]
#repo = 'kannokanno/previm'
#on_ft = 'md'
#
#[[plugins]]
#repo = 'tyru/open-browser.vim'
#on_ft = 'md'
#
#[[plugins]]
#repo = 'miyakogi/livemark.vim'
#on_ft = 'md'

#-----------------------------------------------------------
#http://adragoona.hatenablog.com/entry/2015/07/21/164138
#ヘッダーとソースの行き来するプラグイン
[[plugins]]
repo = 'mopp/next-alter.vim'

#------------------------------------------------------------
# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
let g:rustfmt_autosave = 1
'''

#[[plugins]]
#repo = 'scrooloose/syntastic'
#on_ft = ['rust', 'python']
#hook_post_source = '''
#set statusline+=%#warningmsg#
#set statusline+=%{SyntasticStatuslineFlag()}
#set statusline+=%*
#
#let g:syntastic_always_populate_loc_list = 1
#let g:syntastic_auto_loc_list = 1
#let g:syntastic_check_on_open = 1
#let g:syntastic_check_on_wq = 0
#" see :h syntastic-loclist-callback
#function! SyntasticCheckHook(errors)
#    if !empty(a:errors)
#        let g:syntastic_loc_list_height = min([len(a:errors), 10])
#    endif
#endfunction
#'''

#[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'rust-lang-nursery/rustfmt'
on_ft = 'rust'

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
depends = 'deoplete.nvim'
on_ft = ['rust', 'vue', 'python', 'cpp']
build = './install.sh'
hook_add = '''
set hidden
set signcolumn=yes
let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'python': ['pyls'],
    \ 'cpp': ['clangd'],
    \ }
let g:LanguageClient_autoStart = 1
let g:LanguageClient_loggingFile = expand('~/.vim/LanguageClient.log')
let g:LanguageClient_settingsPath = expand('~/.vim/settings.json')
let g:LanguageClient_completionPreferTextEdit = 1
let g:LanguageClient_rootMarkers = {
    \ 'javascript': ['project.json'],
    \ 'rust': ['Cargo.toml'],
    \ }
let g:LanguageClient_diagnosticsEnable=1
let g:LanguageClient_diagnosticsList="Quickfix"
function LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>
    nnoremap <buffer> <silent> <F2> :call LanguageClient#textDocument_rename()<CR>
  endif
endfunction

autocmd FileType * call LC_maps()
let g:LanguageClient_diagnosticsDisplay = {
     \        1: {
     \            "name": "Error",
     \            "texthl": "ALEError",
     \            "signText": "✗",
     \            "signTexthl": "ALEErrorSign",
     \            "virtualTexthl": "Error",
     \        },
     \        2: {
     \            "name": "Warning",
     \            "texthl": "ALEWarning",
     \            "signText": "！",
     \            "signTexthl": "ALEWarningSign",
     \            "virtualTexthl": "Todo",
     \        },
     \        3: {
     \            "name": "Information",
     \            "texthl": "ALEInfo",
     \            "signText": "ｉ",
     \            "signTexthl": "ALEInfoSign",
     \            "virtualTexthl": "Todo",
     \        },
     \        4: {
     \            "name": "Hint",
     \            "texthl": "ALEInfo",
     \            "signText": "＞",
     \            "signTexthl": "ALEInfoSign",
     \            "virtualTexthl": "Todo",
     \        },
     \     }
'''
hook_source = '''
set completefunc=LanguageClient#complete
set formatexpr=LanguageClient#textDocument_rangeFormatting_sync()
'''

## LSP非対応言語はこっちのLinterをつかう
#[[plugins]]
#repo = 'w0rp/ale'
#hook_source = '''
#let g:ale_lint_on_text_changed = 'never'
#let g:ale_lint_on_insert_leave = 1
#let g:ale_sign_column_always = 1
#highlight ALEError ctermbg=52
#highlight ALEWarning ctermbg=52
#"highlight ALEInfo ctermbg=52
#"highlight ALEStyleError ctermbg=52
#"highlight ALEStyleWarning ctermbg=52
#'''

#[[plugins]]
#repo = 'rhysd/rust-doc.vim'

#------------------------------------------------------------
# vimdiff
[[plugins]]
repo = 'lambdalisue/vim-unified-diff'

#------------------------------------------------------------
# easymotion
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
nmap <Leader>s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
let g:rainbow_conf = {
	\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	\	'ctermfgs': ['Blue', 'Yellow', 'Cyan', 'Magenta'],
	\	'operators': '_,_',
	\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	\	'separately': {
	\		'*': {},
	\		'tex': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	\		},
	\		'lisp': {
	\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	\		},
	\		'vim': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	\		},
	\		'html': {
	\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	\		},
	\		'css': 0,
	\	}
	\}
'''

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
nnoremap <silent> <Leader>m :OverCommandLine<CR>
nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
nnoremap subp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
set noshowmode
'''

[[plugins]]
repo = 'tikhomirov/vim-glsl'
hook_add = '''
autocmd! BufNewFile,BufRead *.vs,*.fs set ft=glsl
'''
